/*
 * Copyright Â© 2018 John Neffenger
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.status6;

import java.awt.Font;
import java.awt.FontFormatException;
import java.io.IOException;
import java.io.InputStream;
import java.lang.System.Logger.Level;

/**
 * Demonstrates the text rendering of TrueType (TTF) and OpenType (OTF) fonts.
 *
 * @author John Neffenger
 */
public class FontDemo extends javax.swing.JFrame {

    private static final Class CLASS = FontDemo.class;
    private static final System.Logger LOGGER = System.getLogger(CLASS.getName());
    private static final String TTF_FILE_NAME = "SourceCodePro-Regular.ttf";
    private static final String OTF_FILE_NAME = "SourceCodePro-Regular.otf";
    private static final float FONT_SIZE = 14f;
    private static final String TEXT
            = "It was on a dreary night of November\n"
            + "that I beheld the accomplishment of\n"
            + "my toils.  With an anxiety that almost\n"
            + "amounted to agony, I collected the\n"
            + "instruments of life around me, that I\n"
            + "might infuse a spark of being into the\n"
            + "lifeless thing that lay at my feet.";

    private Font ttf;
    private Font otf;

    /**
     * Creates new form FontDemo
     */
    public FontDemo() {
        try {
            InputStream ttfStream = CLASS.getResourceAsStream(TTF_FILE_NAME);
            if (ttfStream == null) {
                throw new IOException(TTF_FILE_NAME);
            }

            InputStream otfStream = CLASS.getResourceAsStream(OTF_FILE_NAME);
            if (otfStream == null) {
                throw new IOException(OTF_FILE_NAME);
            }

            Font[] ttfBase = Font.createFonts(ttfStream);
            Font[] otfBase = Font.createFonts(otfStream);
            ttf = ttfBase[0].deriveFont(FONT_SIZE);
            otf = otfBase[0].deriveFont(FONT_SIZE);

            initComponents();

            LOGGER.log(Level.DEBUG, "TTF = {0}", ttfText.getFont());
            LOGGER.log(Level.DEBUG, "OTF = {0}", otfText.getFont());
        } catch (FontFormatException | IOException e) {
            LOGGER.log(Level.ERROR, "Failed to load font", e);
            System.exit(0);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ttfPanel = new javax.swing.JPanel();
        ttfScrollPane = new javax.swing.JScrollPane();
        ttfText = new javax.swing.JTextArea();
        otfPanel = new javax.swing.JPanel();
        otfScrollPane = new javax.swing.JScrollPane();
        otfText = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Font Demo");
        setMinimumSize(new java.awt.Dimension(375, 425));
        setPreferredSize(new java.awt.Dimension(375, 425));

        ttfPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("TrueType (TTF)"));

        ttfScrollPane.setForeground(new java.awt.Color(0, 0, 0));
        ttfScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        ttfScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        ttfText.setEditable(false);
        ttfText.setColumns(20);
        ttfText.setFont(ttf);
        ttfText.setForeground(new java.awt.Color(0, 0, 0));
        ttfText.setRows(6);
        ttfText.setText(TEXT);
        ttfScrollPane.setViewportView(ttfText);

        javax.swing.GroupLayout ttfPanelLayout = new javax.swing.GroupLayout(ttfPanel);
        ttfPanel.setLayout(ttfPanelLayout);
        ttfPanelLayout.setHorizontalGroup(
            ttfPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ttfPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ttfScrollPane)
                .addContainerGap())
        );
        ttfPanelLayout.setVerticalGroup(
            ttfPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ttfPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ttfScrollPane)
                .addContainerGap())
        );

        otfPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("OpenType (OTF)"));

        otfScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        otfScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        otfText.setEditable(false);
        otfText.setColumns(20);
        otfText.setFont(otf);
        otfText.setForeground(new java.awt.Color(0, 0, 0));
        otfText.setRows(6);
        otfText.setText(TEXT);
        otfScrollPane.setViewportView(otfText);

        javax.swing.GroupLayout otfPanelLayout = new javax.swing.GroupLayout(otfPanel);
        otfPanel.setLayout(otfPanelLayout);
        otfPanelLayout.setHorizontalGroup(
            otfPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(otfPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(otfScrollPane)
                .addContainerGap())
        );
        otfPanelLayout.setVerticalGroup(
            otfPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(otfPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(otfScrollPane)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ttfPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(otfPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ttfPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(otfPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(() -> {
            FontDemo demo = new FontDemo();
            demo.setLocationRelativeTo(null);
            demo.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel otfPanel;
    private javax.swing.JScrollPane otfScrollPane;
    private javax.swing.JTextArea otfText;
    private javax.swing.JPanel ttfPanel;
    private javax.swing.JScrollPane ttfScrollPane;
    private javax.swing.JTextArea ttfText;
    // End of variables declaration//GEN-END:variables
}
